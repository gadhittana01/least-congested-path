// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/graph.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	utils "github.com/gadhittana01/least-congested-path/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockIGraph is a mock of IGraph interface.
type MockIGraph struct {
	ctrl     *gomock.Controller
	recorder *MockIGraphMockRecorder
}

// MockIGraphMockRecorder is the mock recorder for MockIGraph.
type MockIGraphMockRecorder struct {
	mock *MockIGraph
}

// NewMockIGraph creates a new mock instance.
func NewMockIGraph(ctrl *gomock.Controller) *MockIGraph {
	mock := &MockIGraph{ctrl: ctrl}
	mock.recorder = &MockIGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGraph) EXPECT() *MockIGraphMockRecorder {
	return m.recorder
}

// AddEdge mocks base method.
func (m *MockIGraph) AddEdge(from, to string, congestion int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEdge", from, to, congestion)
}

// AddEdge indicates an expected call of AddEdge.
func (mr *MockIGraphMockRecorder) AddEdge(from, to, congestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEdge", reflect.TypeOf((*MockIGraph)(nil).AddEdge), from, to, congestion)
}

// FindLeastCongestedPath mocks base method.
func (m *MockIGraph) FindLeastCongestedPath(start, end string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLeastCongestedPath", start, end)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindLeastCongestedPath indicates an expected call of FindLeastCongestedPath.
func (mr *MockIGraphMockRecorder) FindLeastCongestedPath(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLeastCongestedPath", reflect.TypeOf((*MockIGraph)(nil).FindLeastCongestedPath), start, end)
}

// GetNode mocks base method.
func (m *MockIGraph) GetNode(nodeName string) []utils.Edge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeName)
	ret0, _ := ret[0].([]utils.Edge)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockIGraphMockRecorder) GetNode(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockIGraph)(nil).GetNode), nodeName)
}
