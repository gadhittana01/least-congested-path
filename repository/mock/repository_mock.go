// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddRoad mocks base method.
func (m *MockIRepository) AddRoad(start, end string, congestion int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRoad", start, end, congestion)
}

// AddRoad indicates an expected call of AddRoad.
func (mr *MockIRepositoryMockRecorder) AddRoad(start, end, congestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoad", reflect.TypeOf((*MockIRepository)(nil).AddRoad), start, end, congestion)
}

// FindLeastCongestedPath mocks base method.
func (m *MockIRepository) FindLeastCongestedPath(start, end string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLeastCongestedPath", start, end)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindLeastCongestedPath indicates an expected call of FindLeastCongestedPath.
func (mr *MockIRepositoryMockRecorder) FindLeastCongestedPath(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLeastCongestedPath", reflect.TypeOf((*MockIRepository)(nil).FindLeastCongestedPath), start, end)
}
